---
- name: Update APT packages
  apt:
    update_cache: yes
    force_apt_get: yes

- name: Import Jenkins Key
  apt_key:
    url: https://pkg.jenkins.io/debian-stable/jenkins.io.key
    state: present

- name: Add Jenkins Repository to /etc/apt/sources.list
  apt_repository:
    repo: deb https://pkg.jenkins.io/debian-stable binary/
    state: present
    validate_certs: no

- name: Install Jenkins
  apt:
    name: jenkins
    update_cache: true
    state: present

# - name: Change Jenkins JAVA options to skip the setup wizard
#   lineinfile:
#     dest: /etc/init.d/jenkins
#     regexp: ^JENKINS_JAVA_OPTIONS=
#     line: JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"

- name: Set custom HTTP port to jenkins
  lineinfile:
    path: /etc/default/jenkins
    regexp: '--httpPort='
    line: 'JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpPort=8081"'
    backrefs: yes

- name: Ensure groovy csrf error is bypassed
  lineinfile:
    path: /etc/default/jenkins
    line: 'JAVA_ARGS="$JAVA_ARGS -Dhudson.security.csrf.DefaultCrumbIssuer.EXCLUDE_SESSION_ID=true"'
    create: yes

- name: Ensure Jenkins is running
  become: yes
  become_user: root
  service:
    name: jenkins
    state: started 
    
- name: Sleep for 25 seconds 
  wait_for: 
    timeout: 25
  
- name: Fetch Jenkins password
  shell: cat /var/lib/jenkins/secrets/initialAdminPassword
  changed_when: false
  register: jenkinsPasswrd

- name: Print Jenkins Password
  debug: 
    var: jenkinsPasswrd.stdout

- name: Fetch current user information
  shell: whoami
  changed_when: false
  register: whoami

- name: Print current user information
  debug:
    var: whoami.stdout


# - name: JENKINS-CTEDENTIALS | Create CRUMB authentication request
#   uri:
#     url: 'http://localhost:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
#     user: admin
#     password: '{{ jenkinsPasswrd.stdout }}'
#     force_basic_auth: yes
#     return_content: yes
#   register: crumb

# - name: JENKINS-CTEDENTIALS | Add Jenkins administration account
#   uri:
#     method: POST
#     url: 'http://localhost:8080/securityRealm/createAccountByAdmin'
#     user: admin
#     password: '{{ jenkinsPasswrd.stdout }}'
#     force_basic_auth: yes
#     follow_redirects: all
#     headers:
#       Jenkins-Crumb: '{{ crumb.content.split(":")[1] }}'
#       Cookie: '{{ crumb.set_cookie }}'
#     # body: 'username=user2&password1=pass&password2=pass&fullname=fullname&email=bubba%40dummy.bg'
#     body: 'username={{ jenkins_user }}&password1={{ jenkins_pass }}&password2={{ jenkins_pass }}&fullname={{ jenkins_fullname }}&email={{ jenkins_email }}'


# - name: unlock and add admin user
#   jenkins_script:
#     script: |
#       import jenkins.model.*
#       import hudson.security.*
      
#       def instance = Jenkins.getInstance()
#       def hudsonRealm = new HudsonPrivateSecurityRealm(false)
#       hudsonRealm.createAccount('jenkins', 'jenkins')
#       instance.setSecurityRealm(hudsonRealm)
#       def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
#       strategy.setAllowAnonymousRead(false)
#       instance.setAuthorizationStrategy(strategy)
#       instance.save()
#     args:
#      user_pwd: "jenkins"
    
#     user: admin
#     password: "{{ jenkinsPasswrd.stdout }}"

# - name: complete setup wizard
#   jenkins_script:
#     script: |
#       import static jenkins.model.Jenkins.instance as jenkins
#       import jenkins.install.InstallState
#       if (!jenkins.installState.isSetupComplete()) {
#         InstallState.INITIAL_SETUP_COMPLETED.initializeState()
#       }
#       user: admin
#       password: "{{ jenkinsPasswrd.stdout }}"

# - name: install suggested plugins
#   jenkins_plugin:
#     name: "{{ item }}"
#     state: latest
#     url_username: admin
#     url_password: "{{ jenkinsPasswrd.stdout }}"
#     with_items: 
#     - cloudbees-folder
#     - gradle
#     - ant
#     - git
#     - antisamy-markup-formatter
#     - build-timeout
#     - credentials-binding
#     - timestamper
#     - github-branch-source
#     - pipeline-github-lib- name: unlock and add admin user
#   jenkins_script:
#     script: |
#       import jenkins.model.*
#       import hudson.security.*
      
#       def instance = Jenkins.getInstance()
#       def hudsonRealm = new HudsonPrivateSecurityRealm(false)
#       hudsonRealm.createAccount('jenkins', 'jenkins')
#       instance.setSecurityRealm(hudsonRealm)
#       def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
#       strategy.setAllowAnonymousRead(false)
#       instance.setAuthorizationStrategy(strategy)
#       instance.save()
#     args:
#      user_pwd: "jenkins"
    
#     user: admin
#     password: "{{ jenkinsPasswrd.stdout }}"

# - name: complete setup wizard
#   jenkins_script:
#     script: |
#       import static jenkins.model.Jenkins.instance as jenkins
#       import jenkins.install.InstallState
#       if (!jenkins.installState.isSetupComplete()) {
#         InstallState.INITIAL_SETUP_COMPLETED.initializeState()
#       }
#       user: admin
#       password: "{{ jenkinsPasswrd.stdout }}"

# - name: install suggested plugins
#   jenkins_plugin:
#     name: "{{ item }}"
#     state: latest
#     url_username: admin
#     url_password: "{{ jenkinsPasswrd.stdout }}"
#     with_items: 
#     - cloudbees-folder
#     - gradle
#     - ant
#     - git
#     - antisamy-markup-formatter
#     - build-timeout
#     - credentials-binding
#     - timestamper
#     - github-branch-source
#     - pipeline-github-lib
#     - pipeline-stage-view
#     - pam-auth
#     - ldap
#     - email-ext
#     - mailer
#     - matrix-auth
#     - ssh-slaves
#     - ws-cleanup

#     - pipeline-stage-view
#     - pam-auth
#     - ldap
#     - email-ext
#     - mailer
#     - matrix-auth
#     - ssh-slaves
#     - ws-cleanup
