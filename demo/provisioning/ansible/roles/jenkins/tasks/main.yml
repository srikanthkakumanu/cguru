---
- include_vars: ../vars/main.yml

- name: Update APT packages
  apt:
    update_cache: yes
    force_apt_get: yes

- name: Import Jenkins Key
  apt_key:
    url: https://pkg.jenkins.io/debian-stable/jenkins.io.key
    state: present

- name: Add Jenkins Repository to /etc/apt/sources.list
  apt_repository:
    repo: deb https://pkg.jenkins.io/debian-stable binary/
    state: present
    validate_certs: no

- name: Install Jenkins
  apt:
    name: jenkins
    update_cache: true
    state: present

- name: Assign devops user to jenkins group
  become: yes
  become_user: root
  user: 
    name: "devops"
    group: "jenkins" 
    append: yes
    state: present 

- name: Customize Jenkins config
  template: 
    src: templates/jenkins.j2
    dest: /etc/default/jenkins
    owner: root
    mode: 0644

- name: Ensure Jenkins is running
  become: yes
  become_user: root
  service:
    name: jenkins
    state: started 
    
- name: Sleep for 25 seconds 
  wait_for: 
    timeout: 2

- name: Check Jenkins Password file exists or not
  stat:
    path: /var/lib/jenkins/secrets/initialAdminPassword
  register: password_file

- name: Fetch Jenkins password if file exists
  command:
    cmd: cat /var/lib/jenkins/secrets/initialAdminPassword
  register: jenkinsPasswrd
  when: password_file.stat.exists

- name: Print Jenkins Password
  debug: 
    var: jenkinsPasswrd.stdout
  when: password_file.stat.exists and jenkinsPasswrd is defined

# - name: Fetch current user information
#   shell: whoami
#   changed_when: false
#   register: whoami

# - name: Print current user information
#   debug:
#     var: whoami.stdout


# - name: JENKINS-CREDENTIALS - Create crumb authentication request
#   uri:
#     url: 'http://localhost:8081/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
#     user: admin
#     password: '{{ jenkinsPasswrd.stdout }}'
#     force_basic_auth: yes
#     return_content: yes
#   register: crumb
#   when: jenkinsPasswrd is defined

# - name: Print crumb information
#   debug:
#     var: crumb
#   when: crumb is defined 

# - name: JENKINS-CREDENTIALS - Add Jenkins administration account
#   uri:
#     method: POST
#     url: 'http://localhost:8081/securityRealm/createAccountByAdmin'
#     user: admin
#     password: '{{ jenkinsPasswrd.stdout }}'
#     force_basic_auth: yes
#     follow_redirects: all
#     headers:
#       Jenkins-Crumb: '{{ crumb.content.split(":")[1] }}'
#       # Cookie: '{{ crumb.set_cookie }}'
#     body: 'username={{ JENKINS_USER_NAME }}&password1={{ JENKINS_PASSWORD1 }}&password2={{ JENKINS_PASSWORD2 }}&fullname={{ JENKINS_FULL_NAME }}&email={{ JENKINS_EMAIL }}%40dummy.bg'
#     when: crumb is defined

# - name: unlock Jenkins and create jenkins user
#   jenkins_script:
#     script: |
#       import jenkins.model.*
#       import hudson.security.*
      
#       def instance = Jenkins.getInstance()
#       def hudsonRealm = new HudsonPrivateSecurityRealm(false)
#       hudsonRealm.createAccount('jenkins', 'jenkins')
#       instance.setSecurityRealm(hudsonRealm)
#       def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
#       strategy.setAllowAnonymousRead(false)
#       instance.setAuthorizationStrategy(strategy)
#       instance.save()
#       args:
#         user_pwd: "jenkins"
#     user: admin
#     password: "{{ jenkinsPasswrd.stdout }}"
#     url: http://localhost:8081

# - name: install jenkins suggested plugins
#   jenkins_plugin:
#     name: "{{ suggested_plugins }}"
#     state: latest
#     url_username: jenkins
#     url_password: jenkins
#     url: http://localhost:8081
#     # loop: "{{ suggested_plugins }}"

# - name: Check if restart is required by any of the unversioned plugins
#   set_fact:
#     jenkins_restart_required: yes    

# - name: Ensure Jenkins is restarted
#   become: yes
#   become_user: root
#   service:
#     name: jenkins
#     state: restarted 
